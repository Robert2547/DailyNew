services:
  auth_service:
    build: 
      context: ./AuthService
    ports:
      - "${AUTH_SERVICE_PORT}:8001"
    environment:
      - POSTGRES_HOST=auth_db
      - AUTH_DB_PORT=5432
      - AUTH_DB_NAME=${AUTH_DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - app_network

  user_service:
    build: 
      context: ./UserService
    ports:
      - "${USER_SERVICE_PORT}:8002"
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@user_db:5432/${USER_DB_NAME} 
      - AUTH_SERVICE_URL=http://auth_service:8001
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - app_network

  watchlist_service:
      build: 
        context: ./Watchlist
      ports:
        - "${WATCHLIST_SERVICE_PORT}:8003"
      environment:
        - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@watchlist_db:5432/${WATCHLIST_DB_NAME}
        - AUTH_SERVICE_URL=http://auth_service:8001
        - USER_SERVICE_URL=http://user_service:8002
      depends_on:
        watchlist_db:
          condition: service_healthy
      networks:
        - app_network

           
  auth_db:
    image: postgres:13
    environment:
      - POSTGRES_DB=${AUTH_DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5440:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${AUTH_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  user_db:
    image: postgres:13
    environment:
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - user_db_data:/var/lib/postgresql/data
    ports:
      - "5441:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${USER_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  watchlist_db:
      image: postgres:13
      environment:
        - POSTGRES_DB=${WATCHLIST_DB_NAME}
        - POSTGRES_USER=${DB_USER}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
      volumes:
        - watchlist_db_data:/var/lib/postgresql/data
      ports:
        - "5444:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${WATCHLIST_DB_NAME}"]
        interval: 5s
        timeout: 5s
        retries: 5
      networks:
        - app_network

  # Test_DB for running automated tests
  auth_test_db:
    image: postgres:13
    environment:
      - POSTGRES_DB=auth_test_db
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    ports:
      - "5442:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d auth_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  user_test_db:
    image: postgres:13
    environment:
      - POSTGRES_DB=user_test_db
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    ports:
      - "5443:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d user_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  watchlist_test_db:
    image: postgres:13
    environment:
      - POSTGRES_DB=watchlist_test_db
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    ports:
      - "5445:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d watchlist_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: {}
  user_db_data: {}
  watchlist_db_data: {}